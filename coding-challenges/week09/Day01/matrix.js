// Week 9 â€“ Day 1: Coding Challenge
// (Maximum marks - 15)
// AttainU Id: #57
// Q - 1) Write a program to print the sum of right diagonal of a matrix
// Q - 2) Write a program to print sum of border elements of a square Matrix
// Q - 3) Write a function to return sum of rows of a matrix as an array
// Marks distribution:
// Question 1 carry 15 marks

// Q - 1) Write a program to print the sum of right diagonal of a matrix

let sumOfRightDiagonal = (matrix) =>
{ 
    let sum=0;
    for(i=0;i<matrix.length;i++)
    {
        sum+= matrix[i][matrix.length-i-1]
    }
    return sum;
   
}
   
console.log(sumOfRightDiagonal([[ 1, 2, 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ]]));


// here  1 2 3
//       4 5 6
//       7 8 9 the right diagonal elements is 3,5,7 addition = 15


// Q - 2) Write a program to print sum of border elements of a square Matrix


let sumOfBorder = (matrix) =>
{ 
    let sum=0;
    let totalRows =matrix.length;
    let totalColumns=   matrix[0].length;
    let firstRow = matrix[0];
    let lastRow = matrix[matrix.length-1];
    let frstElement =  matrix[0][0];
    let frstrowlastElement =  matrix[0][matrix.length-1];
    let lastRowfrstElement=  matrix[matrix.length-1][0];
    let lastElement = matrix[totalRows-1][totalColumns-1]; // to get the last element
    let elementtoSub = frstElement + frstrowlastElement +lastRowfrstElement + lastElement; 
    for(i=0;i<matrix.length;i++)
    { 
        sum+= firstRow[i] + lastRow[i] + matrix[i][0] + matrix[i][matrix.length-1] ;
    }
    return sum = sum-elementtoSub;
   
}
   
console.log(sumOfBorder([[ 1, 2, 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ]]));

// if we add the border elements that is frsrow & last row & frstcolumn & 
// last column then to  omit the elements  by subtrating from whole sum 


// Q - 3) Write a function to return sum of rows of a matrix as an array

let sumOfRowsArray = (matrix) =>
{ 
    let sumofArray=[];
    let sum = 0;
    let totalRows =matrix.length;
    let totalColumns= matrix[0].length;
    for(i=0;i<totalRows;i++)
    {
      for(j=0;j<totalColumns;j++)
      {
        if(matrix[i][j] == undefined) //  becoz if materix[2,3] or [3,3] is empty which will return undefined so  considering as empty
           matrix[i][j]= 0;
        sum +=matrix[i][j]; 
      }
    }
    sumofArray.push(sum);
    return sumofArray;
}
   
console.log(sumOfRowsArray([[ 1, 2, 3,5], [ 4, 5, 6 ], [ 7, 8, 9 ]]));


// / / /####################################################
//#####################################################
//################################################
//###############################################
//###############################################
//##############################################
//********************************************************
// *************************************
//  */***********************************
// *******************************************
// ******************** */
//####################################################
//#####################################################
//################################################
//###############################################
//###############################################
//##############################################
//********************************************************
// *************************************
//  */***********************************
// *******************************************
// ******************** */

//####################################################
//#####################################################
//################################################
//###############################################
//###############################################
//##############################################
//********************************************************
// *************************************
//  */***********************************
// *******************************************
// ******************** */

//####################################################
//#####################################################
//################################################
//###############################################
//###############################################
//##############################################
//********************************************************
// *************************************
//  */***********************************
// *******************************************
// ******************** */
//####################################################
//#####################################################
//################################################
//###############################################
//###############################################
//##############################################
//********************************************************
// *************************************
//  */***********************************
// *******************************************
// ******************** */
//********************************************************
// *************************************
//  */***********************************
// *******************************************
// ******************** */
//********************************************************
// *************************************
//  */***********************************
// *******************************************
// ******************** */