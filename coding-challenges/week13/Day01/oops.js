// Week 13 â€“ Day 1: Coding Challenge
// (Maximum marks - 15)
// AttainU Id: #101
// Describe in detail all the concepts of OOPS with code examples
// Marks distribution:
// Question 1 carry 15 marks

// oops concepts

// Encapsulation:

// combining variables , properties and methods in a single unit is called encapsulation
// class is an example of encapsulation because  class contains properties and methods 

// eg:
// class student{
//     constructor(name,id){
//         this.name = name;
//         this.id = id;
//     }
//     marks(add){
//         this.add = add;
//     }
//     getDetails(){
//         console.log(`Name - ${this.name},marks - ${this.add}`);
//     }
// }
 
// let stud1 = new student('sushmitha',21);
// stud1.marks(100);
// stud1.getDetails();


//Abstraction - hiding the important implementation details from the outside world
// eg:

// class sample {
 
//     constructor(msg){
//        this.msg = msg;
//     }
//     printMsg() {
//     }
 
// }
// class test extends sample {
 
//     constructor(msg){
//        super(msg);
//     }
    
//     printMsg() {
//        console.log("abstract method implemented");
//     }
    
// }
 
// let b = new test('hi');
// b.printMsg(); //gonna print:  abstract method implemented

//Inheritance 

// we can inherit a class in another class so that we can access the 
// methods, properties of that super/parent class

// eg:
// here we can access the parent cls methods in childcls

// class supercls {
//     constructor(msg){
//        this.msg =  msg;
//     }
//     show()
//     {
//        return  "WElcome" + this.msg;

//     }
// }
// class childcls extends supercls {
 
//     constructor(msg,name){
//        super(msg);
//        this.name = name;
//     }
    
//     show2() {
//         return this.show() + " ......" + this.name;
//       } 
// }


// let eg = new childcls("helo", "llll");
// console.log(eg.show2());

// polymorphism

// method overloading, function with same name but performs differently
// it can be called in more than one cls
// eg:
// here   add method is used more than one place but each and everytime 
//  returns a different value 

// class firstClass {
//     add() {
//         console.log("First Method")
//     }
// }
// class secondClass extends firstClass {
//     add() {
//         console.log(30 + 40);
//     }
// }
// class thirdClass extends secondClass {
//     add() {
//         console.log("Last Method")
//     }
// }
// var ob = new firstClass();
// var ob2 = new secondClass();
// var ob3 = new thirdClass();
// ob.add();
// ob2.add();
// ob3.add();


// / / /####################################################
//#####################################################
//################################################
//###############################################
//###############################################
//##############################################
//********************************************************
// *************************************
//  */***********************************
// *******************************************
// ******************** */
//####################################################
//#####################################################
//################################################
//###############################################
//###############################################
//##############################################
//********************************************************
// *************************************
//  */***********************************
// *******************************************
// ******************** */

//####################################################
//#####################################################
//################################################
//###############################################
//###############################################
//##############################################
//********************************************************
// *************************************
//  */***********************************
// *******************************************
// ******************** */

//####################################################
//#####################################################
//################################################
//###############################################
//###############################################
//##############################################
//********************************************************
// *************************************
//  */***********************************
// *******************************************
// ******************** */
//####################################################
//#####################################################
//################################################
//###############################################
//###############################################
//##############################################
//********************************************************
// *************************************
//  */***********************************
// *******************************************
// ******************** */
//********************************************************
// *************************************
//  */***********************************
// *******************************************
// ******************** */
//********************************************************
// *************************************
//  */***********************************
// *******************************************
// ******************** */



